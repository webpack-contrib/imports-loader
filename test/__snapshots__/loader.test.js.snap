// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should not work with source maps when the "devtool" options are disabled: errors 1`] = `Array []`;

exports[`loader should not work with source maps when the "devtool" options are disabled: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";

var someCode = {
  number: 123,
  object: {
    existingSubProperty: 123
  }
};"
`;

exports[`loader should not work with source maps when the "devtool" options are disabled: warnings 1`] = `Array []`;

exports[`loader should throw an error on the empty string: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Invalid \\"      \\" value for import",
]
`;

exports[`loader should throw an error on the empty string: warnings 1`] = `Array []`;

exports[`loader should throw an error when "alias" can not be set using a string notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"side-effects\\" syntax does not support \\"some_alias\\" alias in \\"side-effects ./lib_1 name some_alias\\" value",
]
`;

exports[`loader should throw an error when "alias" can not be set using a string notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "alias" can not be set using an object notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"side-effects\\" syntax does not support \\"some_alias\\" alias in \\"{\\"moduleName\\":\\"./lib_1\\",\\"syntax\\":\\"side-effects\\",\\"alias\\":\\"some_alias\\"}\\" value",
]
`;

exports[`loader should throw an error when "alias" can not be set using an object notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "name" can not be used for a string notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"side-effects\\" syntax does not support \\"some_alias\\" name in \\"side-effects ./lib_1 some_alias\\" value",
]
`;

exports[`loader should throw an error when "name" can not be used for a string notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "name" can not be used for an object notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"side-effects\\" syntax does not support \\"some_name\\" name in \\"{\\"moduleName\\":\\"./lib_1\\",\\"syntax\\":\\"side-effects\\",\\"name\\":\\"some_name\\"}\\" value",
]
`;

exports[`loader should throw an error when "name" can not be used for an object notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "name" do not exist using a string notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"named\\" syntax needs the \\"name\\" option in \\"named ./lib_2.js\\" value",
]
`;

exports[`loader should throw an error when "name" do not exist using a string notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "name" do not exist using an object notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"named\\" syntax needs the \\"name\\" option in \\"{\\"moduleName\\":\\"./lib_2.js\\",\\"syntax\\":\\"named\\"}\\" value",
]
`;

exports[`loader should throw an error when "name" do not exist using an object notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "namespace" ca not be used in CommonJS using a string notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"commonjs\\" type does not support the \\"namespace\\" syntax in \\"namespace ./lib_4 namespace\\" value",
]
`;

exports[`loader should throw an error when "namespace" ca not be used in CommonJS using a string notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "namespace" ca not be used in CommonJS using an object notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"commonjs\\" type does not support the \\"namespace\\" syntax in \\"{\\"moduleName\\":\\"./lib_4\\",\\"name\\":\\"lib_4_all\\",\\"syntax\\":\\"namespace\\"}\\" value",
]
`;

exports[`loader should throw an error when "namespace" ca not be used in CommonJS using an object notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "single" ca not be used in ES module using a string notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"module\\" format does not support the \\"single\\" syntax in \\"single ./lib_4 lib_4_all\\" value",
]
`;

exports[`loader should throw an error when "single" ca not be used in ES module using a string notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when "single" ca not be used in ES module using an object notation: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"module\\" format does not support the \\"single\\" syntax in \\"{\\"moduleName\\":\\"./lib_4\\",\\"name\\":\\"lib_4_all\\",\\"syntax\\":\\"single\\"}\\" value",
]
`;

exports[`loader should throw an error when "single" ca not be used in ES module using an object notation: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "default" format: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"lib_1\\" name found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"default\\",\\"name\\":\\"lib_1\\"},{\\"syntax\\":\\"default\\",\\"name\\":\\"lib_1\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "default" format: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "multiple" format with other syntaxes: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"lib1\\", \\"lib2\\" names found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib2\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib2\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "multiple" format with other syntaxes: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "named" format with other syntaxes: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"lib1\\", \\"lib2\\" names found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"named\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"named\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"named\\",\\"name\\":\\"lib2\\"},{\\"syntax\\":\\"named\\",\\"name\\":\\"lib2\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "named" format with other syntaxes: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "named" format: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"foo\\" name found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"named\\",\\"name\\":\\"foo\\"},{\\"syntax\\":\\"named\\",\\"name\\":\\"foo\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "named" format: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "namespace" format: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"foo\\" name found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"namespace\\",\\"name\\":\\"foo\\"},{\\"syntax\\":\\"namespace\\",\\"name\\":\\"foo\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "namespace" format: warnings 1`] = `Array []`;

exports[`loader should throw an error when duplicate of names found in "single" format: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"lib_1\\" name found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"single\\",\\"name\\":\\"lib_1\\"},{\\"syntax\\":\\"single\\",\\"name\\":\\"lib_1\\"}]]\\" value",
]
`;

exports[`loader should throw an error when duplicate of names found in "single" format: warnings 1`] = `Array []`;

exports[`loader should throw an error when invalid arguments for imports: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"default\\" syntax does not support \\"lib_2_method_2_short\\" alias in \\"{\\"moduleName\\":\\"./lib_2\\",\\"alias\\":\\"lib_2_method_2_short\\"}\\" value",
]
`;

exports[`loader should throw an error when invalid arguments for imports: warnings 1`] = `Array []`;

exports[`loader should throw an error when multiple duplicate of names found in "multiple" format: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Duplicate \\"lib1\\", \\"lib2\\" names found in \\"[\\"lib_1\\",[{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib1\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib2\\"},{\\"syntax\\":\\"multiple\\",\\"name\\":\\"lib2\\"}]]\\" value",
]
`;

exports[`loader should throw an error when multiple duplicate of names found in "multiple" format: warnings 1`] = `Array []`;

exports[`loader should throw an error when no arguments for imports: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
ValidationError: Invalid options object. Imports Loader has been initialized using an options object that does not match the API schema.",
]
`;

exports[`loader should throw an error when no arguments for imports: warnings 1`] = `Array []`;

exports[`loader should throw error on invalid inline syntax: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Invalid \\"named lib_2 name alias something\\" value for import",
]
`;

exports[`loader should throw error on invalid inline syntax: warnings 1`] = `Array []`;

exports[`loader should work "pure" CommonJS imports: errors 1`] = `Array []`;

exports[`loader should work "pure" CommonJS imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
require(\\"./lib_1\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work "pure" CommonJS imports: warnings 1`] = `Array []`;

exports[`loader should work with "default" CommonJS imports: errors 1`] = `Array []`;

exports[`loader should work with "default" CommonJS imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var $ = require(\\"./lib_1\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "default" CommonJS imports: warnings 1`] = `Array []`;

exports[`loader should work with "default" and "named" imports": errors 1`] = `Array []`;

exports[`loader should work with "default" and "named" imports": module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import { lib1_method } from \\"./lib_1\\";
import lib2_default from \\"./lib_2\\";
import { lib2_method_1, lib2_method_2 as lib_2_method_2_short } from \\"./lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "default" and "named" imports": warnings 1`] = `Array []`;

exports[`loader should work with "default" imports: errors 1`] = `Array []`;

exports[`loader should work with "default" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";
import lib_2 from \\"./lib_2.js\\";
import defaultExport from \\"./lib_3.js\\";
import { lib_3_method as method } from \\"./lib_3.js\\";
import lib_4 from \\"./lib_4\\";
import * as lib_4_all from \\"./lib_4\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "default" imports: warnings 1`] = `Array []`;

exports[`loader should work with "imports", "wrapper" and "additionalCode" options: errors 1`] = `Array []`;

exports[`loader should work with "imports", "wrapper" and "additionalCode" options: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import \\"./lib_1\\";

var someVariable = 1;
(function() {
var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};

}.call(window));
"
`;

exports[`loader should work with "imports", "wrapper" and "additionalCode" options: warnings 1`] = `Array []`;

exports[`loader should work with "multiple" CommonJS imports: errors 1`] = `Array []`;

exports[`loader should work with "multiple" CommonJS imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var $ = require(\\"./lib_1\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "multiple" CommonJS imports: warnings 1`] = `Array []`;

exports[`loader should work with "namespace" imports: errors 1`] = `Array []`;

exports[`loader should work with "namespace" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import * as lib_1_all from \\"./lib_1\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "namespace" imports: warnings 1`] = `Array []`;

exports[`loader should work with "side-effects" imports: errors 1`] = `Array []`;

exports[`loader should work with "side-effects" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import \\"./lib_1\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with "side-effects" imports: warnings 1`] = `Array []`;

exports[`loader should work with a string syntax using CommonJS modules: errors 1`] = `Array []`;

exports[`loader should work with a string syntax using CommonJS modules: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var $ = require(\\"./lib_1\\");
var lib_2_all = require(\\"./lib_2\\");
var { lib2_method_1, lib2_method_2: lib_2_method_2_short } = require(\\"./lib_2\\");
require(\\"./lib_4\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with a string syntax using CommonJS modules: warnings 1`] = `Array []`;

exports[`loader should work with a string syntax using CommonJS: errors 1`] = `Array []`;

exports[`loader should work with a string syntax using CommonJS: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var $ = require(\\"./lib_1\\");
var lib_2_all = require(\\"./lib_2\\");
var { lib2_method_1, lib2_method_2: lib_2_method_2_short } = require(\\"./lib_2\\");
require(\\"./lib_3\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with a string syntax using CommonJS: warnings 1`] = `Array []`;

exports[`loader should work with a string syntax using ES modules: errors 1`] = `Array []`;

exports[`loader should work with a string syntax using ES modules: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import $ from \\"./lib_1\\";
import lib_2_all from \\"./lib_2\\";
import { lib2_method_1, lib2_method_2 as lib_2_method_2_short } from \\"./lib_2\\";
import lib_3_default from \\"./lib_3\\";
import * as lib_3_all from \\"./lib_3\\";
import \\"./lib_4\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with a string syntax using ES modules: warnings 1`] = `Array []`;

exports[`loader should work with a string value with spaces: errors 1`] = `Array []`;

exports[`loader should work with a string value with spaces: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with a string value with spaces: warnings 1`] = `Array []`;

exports[`loader should work with a string value: errors 1`] = `Array []`;

exports[`loader should work with a string value: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with a string value: warnings 1`] = `Array []`;

exports[`loader should work with all CommonJS format syntaxes: errors 1`] = `Array []`;

exports[`loader should work with all CommonJS format syntaxes: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var lib_1 = require(\\"lib_1\\");
var { foo, bar: baz } = require(\\"lib_1\\");
require(\\"lib_3\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with all CommonJS format syntaxes: warnings 1`] = `Array []`;

exports[`loader should work with all ES format syntaxes: errors 1`] = `Array []`;

exports[`loader should work with all ES format syntaxes: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";
import { foo, bar as baz } from \\"lib_1\\";
import * as my_namespace from \\"lib_3\\";
import \\"lib_4\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with all ES format syntaxes: warnings 1`] = `Array []`;

exports[`loader should work with an object value: errors 1`] = `Array []`;

exports[`loader should work with an object value: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import $ from \\"./lib_1\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with an object value: warnings 1`] = `Array []`;

exports[`loader should work with inline syntax #1: errors 1`] = `Array []`;

exports[`loader should work with inline syntax #1: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var lib_2_all = require(\\"lib_2\\");
var { lib_2_method: lib_2_method_alias } = require(\\"lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with inline syntax #1: warnings 1`] = `Array []`;

exports[`loader should work with inline syntax #2: errors 1`] = `Array []`;

exports[`loader should work with inline syntax #2: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import $ from \\"lib_2\\";

(function() {
var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};

}.call(window));
"
`;

exports[`loader should work with inline syntax #2: warnings 1`] = `Array []`;

exports[`loader should work with inline syntax: errors 1`] = `Array []`;

exports[`loader should work with inline syntax: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";
import lib_2 from \\"lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with inline syntax: warnings 1`] = `Array []`;

exports[`loader should work with multiple "default" imports and different names: errors 1`] = `Array []`;

exports[`loader should work with multiple "default" imports and different names: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_2 from \\"./lib_2\\";
import lib_3 from \\"./lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "default" imports and different names: warnings 1`] = `Array []`;

exports[`loader should work with multiple "multiple" imports from the one lib: errors 1`] = `Array []`;

exports[`loader should work with multiple "multiple" imports from the one lib: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var { lib_2, lib_3: alias, lib_4 } = require(\\"./lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "multiple" imports from the one lib: warnings 1`] = `Array []`;

exports[`loader should work with multiple "multiple" imports: errors 1`] = `Array []`;

exports[`loader should work with multiple "multiple" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var { lib_2, lib_3: alias } = require(\\"./lib_2\\");
var { lib_4 } = require(\\"./lib_3\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "multiple" imports: warnings 1`] = `Array []`;

exports[`loader should work with multiple "named" imports from the one lib: errors 1`] = `Array []`;

exports[`loader should work with multiple "named" imports from the one lib: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import { lib_2, lib_3 as alias, lib_4 } from \\"./lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "named" imports from the one lib: warnings 1`] = `Array []`;

exports[`loader should work with multiple "named" imports: errors 1`] = `Array []`;

exports[`loader should work with multiple "named" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import { lib_2, lib_3 as alias } from \\"./lib_2\\";
import { lib_4 } from \\"./lib_3\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "named" imports: warnings 1`] = `Array []`;

exports[`loader should work with multiple "namespace" imports: errors 1`] = `Array []`;

exports[`loader should work with multiple "namespace" imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import * as lib_2 from \\"./lib_2\\";
import * as lib_3 from \\"./lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "namespace" imports: warnings 1`] = `Array []`;

exports[`loader should work with multiple "pure" import: errors 1`] = `Array []`;

exports[`loader should work with multiple "pure" import: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
require(\\"./lib_2\\");
require(\\"./lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "pure" import: warnings 1`] = `Array []`;

exports[`loader should work with multiple "side-effects" import: errors 1`] = `Array []`;

exports[`loader should work with multiple "side-effects" import: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import \\"./lib_2\\";
import \\"./lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "side-effects" import: warnings 1`] = `Array []`;

exports[`loader should work with multiple "single" imports and different names: errors 1`] = `Array []`;

exports[`loader should work with multiple "single" imports and different names: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var lib_2 = require(\\"./lib_2\\");
var lib_3 = require(\\"./lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple "single" imports and different names: warnings 1`] = `Array []`;

exports[`loader should work with multiple CommonJS imports and union same: errors 1`] = `Array []`;

exports[`loader should work with multiple CommonJS imports and union same: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var $ = require(\\"./lib_1\\");
var lib_2_all = require(\\"./lib_2\\");
var { lib2_method_1, lib2_method_2: lib_2_method_2_short } = require(\\"./lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple CommonJS imports and union same: warnings 1`] = `Array []`;

exports[`loader should work with multiple CommonJS imports: errors 1`] = `Array []`;

exports[`loader should work with multiple CommonJS imports: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
var { lib2_method_1, lib2_method_2: lib_2_method_2_short } = require(\\"./lib_2\\");

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with multiple CommonJS imports: warnings 1`] = `Array []`;

exports[`loader should work with source maps when the "devtool" option is enabled: errors 1`] = `Array []`;

exports[`loader should work with source maps when the "devtool" option is enabled: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";

var someCode = {
  number: 123,
  object: {
    existingSubProperty: 123
  }
};"
`;

exports[`loader should work with source maps when the "devtool" option is enabled: warnings 1`] = `Array []`;

exports[`loader should work with string arrays: errors 1`] = `Array []`;

exports[`loader should work with string arrays: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/
import lib_1 from \\"lib_1\\";
import lib_2 from \\"lib_2\\";

var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with string arrays: warnings 1`] = `Array []`;

exports[`loader should work with the "additionalCode" option: errors 1`] = `Array []`;

exports[`loader should work with the "additionalCode" option: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/

var someVariable = 1;
var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};
"
`;

exports[`loader should work with the "additionalCode" option: warnings 1`] = `Array []`;

exports[`loader should work with the "wrapper" option: errors 1`] = `Array []`;

exports[`loader should work with the "wrapper" option: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/

(function() {
var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};

}.call(window));
"
`;

exports[`loader should work with the "wrapper" option: warnings 1`] = `Array []`;

exports[`loader should work with the "wrapper" options and arguments: errors 1`] = `Array []`;

exports[`loader should work with the "wrapper" options and arguments: module 1`] = `
"/*** IMPORTS FROM imports-loader ***/

(function() {
var someCode = {
  number: 123,
  object: { existingSubProperty: 123 }
};

}.call(window,document));
"
`;

exports[`loader should work with the "wrapper" options and arguments: warnings 1`] = `Array []`;
